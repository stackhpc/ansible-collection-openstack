---
- name: Check if image suffix is provided
  ansible.builtin.fail:
    msg: os_images_name_suffix is empty please provide it.
  when: os_images_name_suffix is defined and os_images_name_suffix | length == 0

- name: Gather candidates info
  openstack.cloud.image_info:
    auth_type: "{{ os_images_auth_type }}"
    auth: "{{ os_images_auth }}"
    cacert: "{{ os_images_cacert | default(omit) }}"
    interface: "{{ os_images_interface | default(omit, true) }}"
    region_name: "{{ os_images_region | default(omit) }}"
  register: retire_or_promote_list
  when: >
    (os_images_list | selectattr('rename_image', 'defined') | list | length > 0)
    or (os_images_promote | bool)
    or (os_images_retire | bool)

- name: Ensure images for retirement exist
  ansible.builtin.assert:
    that:
      - promotion_name in retire_or_promote_list.images | map(attribute='name') | list
    fail_msg: "The image {{ item.name[: -(os_images_name_suffix | length | int)] }} does not exist."
  vars:
    promotion_name: "{{ item.name[: -(os_images_name_suffix | length | int)] }}"
  loop: "{{ os_images_list | list }}"
  when: item.rename_image | default(os_images_retire) | bool

- name: Ensure images for promotion exist
  ansible.builtin.assert:
    that:
      - item.name in retire_or_promote_list.images | map(attribute='name') | list
    fail_msg: The image {{ item.name }} does not exist.
  loop: "{{ os_images_list | list }}"
  when: item.rename_image | default(os_images_promote) | bool

- name: Check if image suffix is provided
  ansible.builtin.set_fact:
    image_suffix_provided: "{{ os_images_name_suffix is defined and os_images_name_suffix is not none and (os_images_name_suffix | length > 0) }}"

- name: Display info
  ansible.builtin.debug:
    msg: |
      Warning: no image suffix is provided so retired images are not renamed and candidate images are not promoted.
      Images with the `hide_image` attribute will still be hidden.
  when: not (image_suffix_provided | bool)

- name: Hide retire candidate images
  ansible.builtin.command: "{{ os_images_venv }}/bin/openstack image set --hidden {{ promotion_name }}"
  vars:
    promotion_name: "{{ item.name[: -(os_images_name_suffix | length | int)] if image_suffix_provided else item.name }}"
  with_items: "{{ os_images_list | list }}"
  changed_when: true
  when: (item.hide_image | default(os_images_hide) | bool)

- name: Ensure old images are retired
  ansible.builtin.command: "{{ os_images_venv }}/bin/openstack image set {{ promotion_name }} --name {{ promotion_name }}.{{ date_suffix }}"
  vars:
    date_suffix: "{{ ansible_date_time.date }}"
    promotion_name: "{{ item.name[: -(os_images_name_suffix | length | int)] }}"
  loop: "{{ os_images_list | list }}"
  changed_when: true
  when: image_suffix_provided and (item.rename_image | default(os_images_retire) | bool)
  environment: "{{ os_images_venv }}"

- name: Ensure new images are promoted
  ansible.builtin.command: "{{ os_images_venv }}/bin/openstack image set {{ item.name }} --name {{ promotion_name }}"
  vars:
    promotion_name: "{{ item.name[: -(os_images_name_suffix | length | int)] }}"
  loop: "{{ os_images_list | list }}"
  changed_when: true
  when: image_suffix_provided and (item.rename_image | default(os_images_promote) | bool)
  environment: "{{ os_images_venv }}"

- name: Discover retired images
  ansible.builtin.set_fact:
    retire_message: |
      The following images have been retired:
      {% for item in images %}
      {{ item.name[: -(os_images_name_suffix | length | int)] }} > {{ item.name[: -(os_images_name_suffix | length | int)] }}.{{ ansible_date_time.date }}
      {% endfor %}
  vars:
    images: "{{ os_images_list | list }}"
  when: image_suffix_provided and (item.rename_image | default(os_images_retire) | bool)

- name: Display info
  ansible.builtin.debug:
    var: retire_message
  when: image_suffix_provided and (item.rename_image | default(os_images_retire) | bool)

- name: Discover promoted images
  ansible.builtin.set_fact:
    promote_message: |
      The following images have been promoted:
      {% for item in images %}
      {{ item.name }} > {{ item.name[: -(os_images_name_suffix | length | int)] }}
      {% endfor %}
  vars:
    images: "{{ os_images_list | list }}"
  when: image_suffix_provided and (item.rename_image | default(os_images_promote) | bool)

- name: Display info
  ansible.builtin.debug:
    var: promote_message
  when: image_suffix_provided and (item.rename_image | default(os_images_promote) | bool)
